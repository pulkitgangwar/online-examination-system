// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String
  role          Role           @default(STUDENT)
  semester      Int?
  picture       String?
  session       Session[]
  reports       Report[]
  quizzes       Quiz[]
  announcements Announcement[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Quiz {
  id                       String     @id @default(uuid())
  title                    String
  description              String
  Questions                Question[]
  reports                  Report[]
  startingDate             DateTime?
  endingDate               DateTime?
  timeLimit                Int?
  marksPerQuestion         Int?
  negativeMarksPerQuestion Int?
  subject                  String?
  semester                 Int
  User                     User       @relation(fields: [userId], references: [id])
  userId                   String
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @default(now()) @updatedAt
}

model Question {
  id            String   @id @default(uuid())
  question      String
  options       String[]
  correctAnswer Int
  Quiz          Quiz?    @relation(fields: [quizId], references: [id])
  quizId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Report {
  id        String   @id @default(uuid())
  score     String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Announcement {
  id          String   @id @default(uuid())
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  semester    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

enum Role {
  STUDENT
  TEACHER
}
